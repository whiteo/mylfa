name: build

on:
  push:
    branches: [ master ]
    paths: [ '**.java', '.github/workflows/build.yml' ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

jobs:
  analyze:
    name: Sonar analyze
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.1
        with:
          fetch-depth: 0

      - name: Prepare Language Files
        run: |
          mkdir -p ./mylfa/languages
          curl -o ./mylfa/languages/osd.traineddata https://github.com/tesseract-ocr/tessdata/raw/main/osd.traineddata

      - name: Set up JDK
        uses: actions/setup-java@v3.13.0
        with:
          java-version: '20'
          distribution: 'temurin'

      - name: Cache Maven and SonarQube packages
        uses: actions/cache@v3.3.2
        with:
          path: |
            ~/.m2
            ~/.sonar/cache
          key: ${{ runner.os }}-m2-sonar-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2-sonar

      - name: Build with Maven
        env:
          DEMO_ONLY: ${{ secrets.DEMO_ONLY }}
          TOKEN_SECRET_KEY: ${{ secrets.TOKEN_SECRET_KEY }}
          TOKEN_EXPIRATION_TIME: ${{ secrets.TOKEN_EXPIRATION_TIME }}
          APP_LOG_LEVEL: ${{ secrets.APP_LOG_LEVEL }}
          DATABASE_PWD: ${{ secrets.DATABASE_PWD }}
          DATABASE_USER: ${{ secrets.DATABASE_USER }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: mvn -B verify org.sonarsource.scanner.maven:sonar-maven-plugin:sonar -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} -Dsonar.projectName='mylfa'

  docker-deploy:
    needs: [ analyze ]
    name: Docker release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.1.1

      - name: Set up JDK
        uses: actions/setup-java@v3.13.0
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build with Maven
        run: mvn clean package -DskipTests=true --no-transfer-progress

      - name: Create target directory
        run: mkdir -p ${{ github.workspace }}/target

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5.0.0
        with:
          images: whiteo/mylfa

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.0.0

      - name: Login to DockerHub
        uses: docker/login-action@v3.0.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Get version from pom.xml
        id: get-version
        run: echo "::set-output name=version::$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)"

      - name: Build and push
        uses: docker/build-push-action@v5.0.0
        with:
          push: true
          context: ${{ github.workspace }}
          platforms: linux/amd64, linux/arm64
          tags: |
            whiteo/mylfa:${{ steps.get-version.outputs.version }}
            whiteo/mylfa:latest
          build-args: TAG=${{ steps.get-version.outputs.version }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  gh-release-deploy:
    needs: [ docker-deploy ]
    name: Github release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.1.1

      - name: Archive source code
        run: zip -r source-code.zip .

      - name: Get version from pom.xml
        id: get-version
        run: echo "::set-output name=version::$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)"

      - name: Check if release exists
        id: check-release
        run: |
          version=${{ steps.get-version.outputs.version }}
          releases=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/$GITHUB_REPOSITORY/releases/tags/v$version")
          if [[ $releases == *"\"tag_name\":\"v$version\""* ]]; then
          echo "::set-output name=release_exists::true"
          else
          echo "::set-output name=release_exists::false"
          fi

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1.1.4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.get-version.outputs.version }}
          release_name: Release v${{ steps.get-version.outputs.version }}
          draft: false
        if: steps.check-release.outputs.release_exists != 'true'

      - name: Upload source code
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./source-code.zip
          asset_name: source-code.zip
          asset_content_type: application/zip

  badges:
    needs: [ gh-release-deploy ]
    name: Badges upload
    runs-on: ubuntu-latest
    steps:
      - name: Checkout badges branch to a badges directory nested inside first checkout
        uses: actions/checkout@v4.1.1
        with:
          ref: badges
          path: badges

      - name: Download badges
        run: |
          curl -o badges/coverage.svg "${{ secrets.SONAR_HOST_URL }}/api/project_badges/measure?project=${{ secrets.SONAR_PROJECT_KEY }}&metric=coverage&token=${{ secrets.SONAR_BADGE_TOKEN }}"
          curl -o badges/bugs.svg "${{ secrets.SONAR_HOST_URL }}/api/project_badges/measure?project=${{ secrets.SONAR_PROJECT_KEY }}&metric=bugs&token=${{ secrets.SONAR_BADGE_TOKEN }}"
          curl -o badges/duplicated_lines.svg "${{ secrets.SONAR_HOST_URL }}/api/project_badges/measure?project=${{ secrets.SONAR_PROJECT_KEY }}&metric=duplicated_lines_density&token=${{ secrets.SONAR_BADGE_TOKEN }}"
          curl -o badges/lines_of_code.svg "${{ secrets.SONAR_HOST_URL }}/api/project_badges/measure?project=${{ secrets.SONAR_PROJECT_KEY }}&metric=ncloc&token=${{ secrets.SONAR_BADGE_TOKEN }}"
          curl -o badges/maintainability_rating.svg "${{ secrets.SONAR_HOST_URL }}/api/project_badges/measure?project=${{ secrets.SONAR_PROJECT_KEY }}&metric=sqale_rating&token=${{ secrets.SONAR_BADGE_TOKEN }}"
          curl -o badges/quality_gate_status.svg "${{ secrets.SONAR_HOST_URL }}/api/project_badges/measure?project=${{ secrets.SONAR_PROJECT_KEY }}&metric=alert_status&token=${{ secrets.SONAR_BADGE_TOKEN }}"
          curl -o badges/reliability_rating.svg "${{ secrets.SONAR_HOST_URL }}/api/project_badges/measure?project=${{ secrets.SONAR_PROJECT_KEY }}&metric=reliability_rating&token=${{ secrets.SONAR_BADGE_TOKEN }}"
          curl -o badges/security_rating.svg "${{ secrets.SONAR_HOST_URL }}/api/project_badges/measure?project=${{ secrets.SONAR_PROJECT_KEY }}&metric=security_rating&token=${{ secrets.SONAR_BADGE_TOKEN }}"
          curl -o badges/vulnerabilities.svg "${{ secrets.SONAR_HOST_URL }}/api/project_badges/measure?project=${{ secrets.SONAR_PROJECT_KEY }}&metric=vulnerabilities&token=${{ secrets.SONAR_BADGE_TOKEN }}"

      - name: Commit and push badges
        if: ${{ github.event_name != 'pull_request' }}
        run: |
          cd badges
          if [[ `git status --porcelain *.svg` ]]; then
            git config --global user.name 'github-actions'
            git config --global user.email '1650200+github-actions[bot]@users.noreply.github.com'
            git add *.svg
            git commit -m "Update badges"
            git push
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy:
    needs: [ badges ]
    name: Docker deploy
    runs-on: ubuntu-latest

    steps:
      - name: install ssh keys
        run: |
          install -m 600 -D /dev/null ~/.ssh/id_rsa
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.SSH_HOST }} > ~/.ssh/known_hosts

      - name: Copy docker-compose.yml to server
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "docker-compose.yml"
          target: ${{ secrets.SSH_WORK_DIR }}

      - name: connect and pull
        run: ssh ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} "cd ${{ secrets.SSH_WORK_DIR }} && docker compose pull && docker compose up -d && exit"

      - name: cleanup
        run: rm -rf ~/.ssh