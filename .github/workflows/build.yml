name: build

on:
  push:
    branches: [ master ]
    paths: [ '**.java', '.github/workflows/build.yml' ]
  pull_request:
    branches: [ master ]
  workflow_dispatch:

jobs:
  test:
    name: Test coverage
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.1
        with:
          fetch-depth: 0

      - name: Checkout badges branch to a badges directory nested inside first checkout
        uses: actions/checkout@v4.1.1
        with:
          ref: badges
          path: badges

      - name: Prepare Language Files
        run: |
          mkdir -p ./mylfa/languages
          curl -o ./mylfa/languages/osd.traineddata https://github.com/tesseract-ocr/tessdata/raw/main/osd.traineddata

      - name: Set up JDK
        uses: actions/setup-java@v3.13.0
        with:
          java-version: '20'
          distribution: 'temurin'

      - name: Cache Maven and SonarQube packages
        uses: actions/cache@v3.3.2
        with:
          path: |
            ~/.m2
            ~/.sonar/cache
          key: ${{ runner.os }}-m2-sonar-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2-sonar

      - name: Build with Maven
        env:
          DEMO_ONLY: ${{ secrets.DEMO_ONLY }}
          TOKEN_SECRET_KEY: ${{ secrets.TOKEN_SECRET_KEY }}
          TOKEN_EXPIRATION_TIME: ${{ secrets.TOKEN_EXPIRATION_TIME }}
          APP_LOG_LEVEL: ${{ secrets.APP_LOG_LEVEL }}
          DATABASE_PWD: ${{ secrets.DATABASE_PWD }}
          DATABASE_USER: ${{ secrets.DATABASE_USER }}
          DATABASE_URL: ${{ secrets.DATABASE_URL }}
        run: |
          mvn -B clean verify

      - name: Generate JaCoCo badge
        id: jacoco
        uses: cicirello/jacoco-badge-generator@v2.11.0
        with:
          badges-directory: badges
          generate-branches-badge: true
          generate-summary: true

      - name: Log coverage percentages to workflow output
        run: |
          echo "coverage = ${{ steps.jacoco.outputs.coverage }}"
          echo "branches = ${{ steps.jacoco.outputs.branches }}"

      - name: Upload JaCoCo coverage report as a workflow artifact
        uses: actions/upload-artifact@v3.1.3
        with:
          name: jacoco-report
          path: target/site/jacoco/

      - name: Commit and push the coverage badges and summary file
        if: ${{ github.event_name != 'pull_request' }}
        run: |
          cd badges
          if [[ `git status --porcelain *.svg *.json` ]]; then
          git config --global user.name 'github-actions'
          git config --global user.email '1650200+github-actions[bot]@users.noreply.github.com'
          git add *.svg *.json
          git commit -m "Autogenerated JaCoCo coverage badges" *.svg *.json
          git push
          fi

      - name: Comment on PR with coverage percentages
        if: ${{ github.event_name == 'pull_request' }}
        run: |
          REPORT=$(<badges/coverage-summary.json)
          COVERAGE=$(jq -r '.coverage' <<< "$REPORT")%
          BRANCHES=$(jq -r '.branches' <<< "$REPORT")%
          NEWLINE=$'\n'
          BODY="## JaCoCo Test Coverage Summary Statistics${NEWLINE}* __Coverage:__ ${COVERAGE}${NEWLINE}* __Branches:__ ${BRANCHES}"
          gh pr comment ${{github.event.pull_request.number}} -b "${BODY}"
        continue-on-error: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  analyze:
    name: Analyze with SonarQube
    needs: [ test ]
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4.1.1
        with:
          fetch-depth: 0

      - name: Set up JDK
        uses: actions/setup-java@v3.13.0
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Sonar Scan
        uses: kitabisa/sonarqube-action@v1.2.1
        with:
          host: ${{ secrets.SONAR_HOST }}
          login: ${{ secrets.SONAR_TOKEN }}
          projectKey: ${{ secrets.SONAR_PROJECT_KEY }}
          projectName: 'mylfa'

  docker-deploy:
    needs: [ analyze ]
    name: Docker release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.1.1

      - name: Set up JDK
        uses: actions/setup-java@v3.13.0
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Build with Maven
        run: mvn clean package -DskipTests=true --no-transfer-progress

      - name: Create target directory
        run: mkdir -p ${{ github.workspace }}/target

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5.0.0
        with:
          images: whiteo/mylfa

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.0.0

      - name: Login to DockerHub
        uses: docker/login-action@v3.0.0
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Get version from pom.xml
        id: get-version
        run: echo "::set-output name=version::$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)"

      - name: Build and push
        uses: docker/build-push-action@v5.0.0
        with:
          push: true
          context: ${{ github.workspace }}
          platforms: linux/amd64, linux/arm64
          tags: |
            whiteo/mylfa:${{ steps.get-version.outputs.version }}
            whiteo/mylfa:latest
          build-args: TAG=${{ steps.get-version.outputs.version }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  gh-release-deploy:
    needs: [ docker-deploy ]
    name: Github release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4.1.1

      - name: Archive source code
        run: zip -r source-code.zip .

      - name: Get version from pom.xml
        id: get-version
        run: echo "::set-output name=version::$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)"

      - name: Check if release exists
        id: check-release
        run: |
          version=${{ steps.get-version.outputs.version }}
          releases=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" "https://api.github.com/repos/$GITHUB_REPOSITORY/releases/tags/v$version")
          if [[ $releases == *"\"tag_name\":\"v$version\""* ]]; then
          echo "::set-output name=release_exists::true"
          else
          echo "::set-output name=release_exists::false"
          fi

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1.1.4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.get-version.outputs.version }}
          release_name: Release v${{ steps.get-version.outputs.version }}
          draft: false
        if: steps.check-release.outputs.release_exists != 'true'

      - name: Upload source code
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./source-code.zip
          asset_name: source-code.zip
          asset_content_type: application/zip